/*
 * Selling Partner API for Sellers
 * The Selling Partner API for Sellers lets you retrieve information on behalf of sellers about their seller account, such as the marketplaces they participate in. Along with listing the marketplaces that a seller can sell in, the API also provides additional information about the marketplace such as the default language and the default currency. The API also provides seller-specific information such as whether the seller has suspended listings in that marketplace.
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.zhz.selenium.test;

import com.amazon.SellingPartnerAPIAA.AWSAuthenticationCredentials;
import com.amazon.SellingPartnerAPIAA.AWSAuthenticationCredentialsProvider;
import com.amazon.SellingPartnerAPIAA.LWAAuthorizationCredentials;
import com.amazon.spapi.listingsItems_2021_08_01.ApiException;
import com.amazon.spapi.listingsItems_2021_08_01.api.ListingsApi;
import com.amazon.spapi.listingsItems_2021_08_01.api.ListingsApi;
import com.amazon.spapi.listingsItems_2021_08_01.model.ErrorList;
import com.amazon.spapi.listingsItems_2021_08_01.model.Item;
import com.amazon.spapi.listingsItems_2021_08_01.model.ListingsItemPatchRequest;
import com.amazon.spapi.listingsItems_2021_08_01.model.ListingsItemPutRequest;
import com.amazon.spapi.listingsItems_2021_08_01.model.ListingsItemSubmissionResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.*;

/**
 * API tests for ListingsApi
 */
@Ignore
public class ListingsApiTest {

//    private final ListingsApi api = new ListingsApi();

    private static final String USER_ACCESS_KEY_ID = "AKIAZEBPOY3NSMRZEX23";
    private static final String USER_SECRET_ACCESS_KEY = "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";
    private static final String ROLE_ARN = "arn:aws:iam::627164759771:role/SellingPartner";
    private static final String APP_CLIENT_ID = "amzn1.application-oa2-client.784d99cb71d54d67bec7bcf3a940e02f";
    private static final String APP_CLIENT_SECRET = "aa7e97cc6113f3d33c730ce52bd9e5e37d4a3f5378f2791087a7d3c70c3cb5db";
    private static final String REFRESH_TOKEN = "Atzr|IwEBIKwY8fKEosCsC9u64lLor_iqGOgX2oUjsiMsQEsv68GbR-Xis8GadPdpGDa5MN1liqo0EFG5whyxI1Xbl9cBF69oDruhB8gmeqUUTf0I11f8cQus9eeH0GTXEtIbMmmiZhMA8fv-yeQEULM8u-zjz0tlhDcN-ViNw-ql0QTztGdq8a6naPmMjf4OrlSA8-apC2mX_oXG9kjvg4OvDHh3BK7VMAkNzF9pOaRtfcGRuGNpf7sd_halfCo8-QaQNb_-9gHYtwNBnmDTAydts_MPgSQmpMw912QgqZtrNip5plFmOzOI-tnJJ5qHuXzWHz5ah1E";


    /*
     * user credentials
     * */
    AWSAuthenticationCredentials awsAuthenticationCredentials = AWSAuthenticationCredentials.builder()
            .accessKeyId(USER_ACCESS_KEY_ID)
            .secretKey(USER_SECRET_ACCESS_KEY)
            .region("us-east-1")
            .build();

    /*
     * user IAM ARN
     * */
    AWSAuthenticationCredentialsProvider awsAuthenticationCredentialsProvider = AWSAuthenticationCredentialsProvider.builder()
            .roleArn(ROLE_ARN)
            .roleSessionName(getRandomNonce())
            .build();

    /*
     * application
     * */
    LWAAuthorizationCredentials lwaAuthorizationCredentials = LWAAuthorizationCredentials.builder()
            .clientId(APP_CLIENT_ID)
            .clientSecret(APP_CLIENT_SECRET)
            .refreshToken(REFRESH_TOKEN)
            .endpoint("https://api.amazon.com/auth/o2/token")
            .build();


    @Test
    public void getListingsItemTest() throws ApiException {

//        String sku = "TC-2RACK-Lau";

//        List<String> marketplaceIds = null;

        String sellerId = "A3K2FU686JOEA5";
        String sku = "TCCARPHONE";
        List<String> marketplaceIds =new ArrayList<>() ;
        marketplaceIds.add("ATVPDKIKX0DER");
        String issueLocale = "en_US";
        List<String> includedData = new ArrayList<>() ;
        includedData.add("summaries");
        includedData.add("issues");
        includedData.add("offers");
        includedData.add("fulfillmentAvailability");
        includedData.add("attributes");
//        includedData.add("procurement");




        ListingsApi api = new ListingsApi.Builder().awsAuthenticationCredentials(awsAuthenticationCredentials)
                .awsAuthenticationCredentialsProvider(awsAuthenticationCredentialsProvider)
                .lwaAuthorizationCredentials(lwaAuthorizationCredentials)
                .endpoint("https://sellingpartnerapi-na.amazon.com")//请求地区
                .build();

        Item response = api.getListingsItem(sellerId, sku, marketplaceIds, issueLocale, includedData);

        System.out.println(response);
        // TODO: test validations
    }



    /**
     *
     *
     * Delete a listings item for a selling partner.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
//    public void deleteListingsItemTest() throws ApiException {
//        String sellerId = null;
//        String sku = null;
//        List<String> marketplaceIds = null;
//        String issueLocale = null;
//        ListingsItemSubmissionResponse response = api.deleteListingsItem(sellerId, sku, marketplaceIds, issueLocale);
//
//        // TODO: test validations
//    }

    /**
     *
     *
     * Returns details about a listings item for a selling partner.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
//    public void getListingsItemTest() throws ApiException {
//        String sellerId = null;
//        String sku = null;
//        List<String> marketplaceIds = null;
//        String issueLocale = null;
//        List<String> includedData = null;
//        Item response = api.getListingsItem(sellerId, sku, marketplaceIds, issueLocale, includedData);
//
//        // TODO: test validations
//    }




    /**
     *
     *
     * Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
//    public void patchListingsItemTest() throws ApiException {
//        String sellerId = null;
//        String sku = null;
//        List<String> marketplaceIds = null;
//        ListingsItemPatchRequest body = null;
//        String issueLocale = null;
//        ListingsItemSubmissionResponse response = api.patchListingsItem(sellerId, sku, marketplaceIds, body, issueLocale);
//
//        // TODO: test validations
//    }

    /**
     *
     *
     * Creates a new or fully-updates an existing listings item for a selling partner.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException
     *          if the Api call fails
     */
//    @Test
//    public void putListingsItemTest() throws ApiException {
//        String sellerId = null;
//        String sku = null;
//        List<String> marketplaceIds = null;
//        ListingsItemPutRequest body = null;
//        String issueLocale = null;
//        ListingsItemSubmissionResponse response = api.putListingsItem(sellerId, sku, marketplaceIds, body, issueLocale);
//
//        // TODO: test validations
//    }

    public static String getRandomNonce() {
        return UUID.randomUUID().toString().replace("-", "");
    }
}


